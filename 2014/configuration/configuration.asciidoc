= 配置(Configuration)

配置一般简写为`Configuration`，是一种运行时解耦的手段。



== 什么是配置？

=== 常量与配置的区别

为何会把常量和配置放在一起讨论呢？

域名、电话号码、网址应该用配置还是用常量？


==== 常量和枚举

计算机内存中不会被修改的量，常量的对立面是变量，有些语言本身就有常量的定义，有些语言没有，譬如Python。

枚举是一个被命名的整型常数的集合。

脚本语言中没有语言级别的常量，通常会约定一个全大写的变量作为常量来用，例如：

[source, python]
----
DOMAIN = 'example.com'


class UserType(IntEnum):
core = 1
other = 2
----

== 需求

1. 从任何地方都可以获取配置(IOC，依赖倒置)
+
这就意味着配置全局单例，唯一不可变
2. 可被覆盖
+
最简单的场景：开发环境，测试环境，线上环境，90%相同，10%不同
3. 命名空间和延时加载
+
两个场景：
+
. 配置项log_file: 每个进程都用log_file作为日志文件的配置项，但是同时引用两个配置文件时就会发生冲突。
. 配置文件太多，90%用不到，全部加载会浪费内存，这时也需要命名空间配合延时加载技术来解决。

== 设计

=== 全局单例

`Configuration.init()`

=== 基于目录

=== 使用开放的格式


=== 配置的初始化

`Conf.init()`

init的参数数目录的list，如：

[source, python]
----
Conf.init(['/opt/tiger/ss_conf/ss', '/etc/ss_conf', '~/repos/ss_conf_local'])
----

覆盖原则：目录是有顺序的，后面的配置可以覆盖前面的配置。

[source, python]
----
def load_namespace(self, namespace):
    config_dict = {}

        for dir in self.dirs:

            file_name = os.path.join(dir, namespace))
            if not os.path.exists(file_name):
                continue

            with open(file_name) as fp:
                config_dict.update(yaml.load(fp))

        return config_dict
----

=== 命名空间
